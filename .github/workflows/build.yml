name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          - os: macos-14
          - os: macos-15-intel
          - os: ubuntu-22.04
          - os: windows-2022
            comp: llvm1706
          - os: windows-11-arm
            comp: llvm1706
    steps:

      - name: Fetch sources
        uses: actions/checkout@v4

      - name: Checkout qttools
        uses: ./.github/actions/checkout_qttools
        with:
          version: 6.10.0

      - name: Checkout static Qt release
        id: qtsetup
        uses: k61n/qt_static_builds/.github/actions/checkout@main
        with:
          version: 6.10.0
          compiler: ${{matrix.comp}}

#      - name: Maximize Build Space
#        if: runner.os == 'Linux'
#        uses: jlumbroso/free-disk-space@v1.3.1
#        with:
#          tool-cache: true
      - name: Linux env
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y wget xz-utils \
            build-essential libgl1-mesa-dev cmake ninja-build

      - name: Build qttools
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cores=$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          if [[ "$(echo ${RUNNER_OS} | tr '[:upper:]' '[:lower:]')" == "linux" ]]; then
            sed -i 's/\${optional_components}/Gui/g' qttools/CMakeLists.txt
          fi
          mkdir -p qttools/build && cd qttools/build
          cmake \
            .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=${{steps.qtsetup.outputs.qtpath}}
          cmake --build . --target designer --parallel ${cores}
          os=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')
          arch=$(uname -m)
          cd bin
          ditto -c -k --sequesterRsrc --keepParent "Designer.app" designer-${os}-${arch}.zip
          echo "name=designer-${os}-${arch}.zip" >> $GITHUB_ENV
          echo "path=$(realpath designer-${os}-${arch}.zip)" >> $GITHUB_ENV

      - name: Setup llvm
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $arch = $env:PROCESSOR_ARCHITECTURE.ToLower() -replace '^arm64$', 'aarch64' -replace '^amd64$', 'x86_64'
          Start-BitsTransfer -Source `
            "https://github.com/mstorsjo/llvm-mingw/releases/download/20231128/llvm-mingw-20231128-ucrt-${arch}.zip" `
            -Destination .
          7z x .\llvm-mingw-20231128-ucrt-${arch}.zip -o"./"
          Rename-Item -Path "llvm-mingw-20231128-ucrt-${arch}" -NewName "llvm"
          Remove-Item "llvm-mingw-20231128-ucrt-${arch}.zip"

      - name: Build qttools
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $llvm_path = (Resolve-Path "llvm").Path
          $env:Path = "${llvm_path}\bin;" + $env:Path
          mkdir qttools/build
          cd qttools/build
          cmake `
            .. `
            -GNinja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH=${{steps.qtsetup.outputs.qtpath}} `
            -DCMAKE_EXE_LINKER_FLAGS="-static" `
            -DCMAKE_SHARED_LINKER_FLAGS="-static"
          cmake --build . --target designer --parallel ${env:NUMBER_OF_PROCESSORS}
          $os = $env:RUNNER_OS.ToLower()
          $arch = ($env:PROCESSOR_ARCHITECTURE.ToLower() -replace '^amd64$', 'x64')
          $path = (Resolve-Path "bin/designer.exe").Path
          Add-Content -Path $env:GITHUB_ENV -Value "name=designer-${os}-${arch}.zip"
          Add-Content -Path $env:GITHUB_ENV -Value "path=${path}"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{env.name}}
          path: ${{env.path}}
